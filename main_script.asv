addpath("training_test_data/training_nonfaces");
addpath("training_test_data/training_faces");


% STEP 1: crop faces

face = imread("training_test_data/training_faces/2463d171.bmp");

% figure();
%imshow(face)
%[J, rect] = imcrop(face)

% Using the commented out code above, it displays the face and allows you
% to crop it manually, the crop dimension/location is returned as an array,
% the array i made is the one i put into the crop below

cropped_face = imcrop(face,[20.5100   30.5100   61.9800   58.9800]);
[rows_face, cols_face] = size(cropped_face);

folder = "training_test_data/training_faces";
imagefiles = dir(folder);      
nfiles = length(imagefiles);    % Number of files found

cropped_faces = uint8(zeros(rows_face, cols_face, nfiles));

ds = imageDatastore(folder);

for i = 1:nfiles - 2
    % read image from datastore
    img = read(ds);             
    cropped_faces(:,:,i) = imcrop(img,[20.5100   30.5100   61.9800   58.9800]);
end
%%
% STEP 2: take subimages of training_nonfaces that are the size of
% training_faces

non_face_folder = "training_test_data/training_nonfaces/*";

reset(ds);

ds = imageDatastore(non_face_folder);
imagefiles2 = dir(non_face_folder);      
nfiles2 = length(imagefiles2);    % Number of files found

nonfaces = uint8(zeros(rows_face, cols_face, nfiles2)); 
% 7656 hardcoded as the number of subwindows found

counter = 1;

while hasdata(ds) 
    % read image from datastore
    img = rgb2gray(read(ds));             
    [rows_img, cols_img] = size(img);

    for i = 1:rows_face:(rows_img - rows_face)
        for j = 1:cols_face:(cols_img - cols_face)
            window = img(i:(i+rows_face-1), j:(j+cols_face-1));
            nonfaces(:, :, counter) = uint8(window);
            counter = counter + 1;
        end
    end
end

% Successfully created array of subwindows of training_nonfaces. Also they are greyscale
% so need to work on that, but greyscale might be good because the faces
% are grey.

cropped_faces = uint16(cropped_faces);
nonfaces = uint16(nonfaces);


face_integrals = zeros(rows_face,cols_face,nfiles);

for i = 1:nfiles
    face_integrals(:,:,i) = integral_image(cropped_faces(:,:,i));
end

nonface_integrals = zeros(rows_face,cols_face,nfiles2);

for i = 1:counter - 1
    nonface_integrals(:,:,i) = integral_image(nonfaces(:,:,i));
end

%%
number = 5000; %% Might need to change this value
weak_classifiers = cell(1, number);
for i = 1:number
    weak_classifiers{i} = generate_classifier(rows_face, cols_face);
end

%%

example_number = size(cropped_faces, 3) + size(nonfaces, 3);
labels = zeros(example_number, 1);
labels (1:size(cropped_faces, 3)) = 1;
labels((size(cropped_faces, 3)+1):example_number) = -1;
examples = zeros(rows_face, cols_face, example_number);
examples (:, :, 1:size(cropped_faces, 3)) = face_integrals;
examples(:, :, (size(cropped_faces, 3)+1):example_number) = nonface_integrals;

classifier_number = numel(weak_classifiers);

responses =  zeros(classifier_number, example_number);

for example = 1:example_number
    integral = examples(:, :, example);
    for feature = 1:classifier_number
        classifier = weak_classifiers {feature};
        responses(feature, example) = eval_weak_classifier(classifier, integral);
    end
    disp(example);
end

%%
% choose a classifier
a = random_number(1, classifier_number);
wc = weak_classifiers{a};

% choose a training image
b = random_number(1, example_number);
if (b <= size(cropped_faces, 3))
    integral = face_integrals(:, :, b);
else
    integral = nonface_integrals(:, :, b - size(cropped_faces,3));
end

% see the precomputed response
disp([a, b]);
disp(responses(a, b));
disp(eval_weak_classifier(wc, integral));

%%
weights = ones(example_number, 1) / example_number;
%%

cl = random_number(1, 5000);
[error, thr, alpha] = weighted_error(responses, labels, weights, cl)

%%

weights = ones(example_number, 1) / example_number;
% next line takes about 8.5 seconds.
tic; [index error threshold] = find_best_classifier(responses, labels, weights); toc
disp([index error]);

%%

boosted_classifier = AdaBoost(responses, labels, 15);

%%

% % % % % % % % % % 
% % % % % % % % % % 
fprintf('Booststrapping Section Starting...')
failed_predicts = [];


for index = 1:length(example_number)
    prediction_plus = boosted_predict(cropped_faces(:, :, index), boosted_classifier, weak_classifiers, 15);
    prediction_neg = boosted_predict(nonfaces(:, :, index), boosted_classifier, weak_classifiers, 15);

    if(prediction_plus<0)
        failed_predicts = [failed_predicts index];
    end
    if(prediction_neg>0)
        failed_predicts = [failed_predicts index];
    end
end

new_responses =  zeros(classifier_number, example_number);
for i = 1:length(failed_predicts)
    example = failed_predicts(i);  
    integral = examples(:, :, example);
    for feature = 1:classifier_number
        classifier = weak_classifiers {feature};
        new_responses(feature, example) = eval_weak_classifier(classifier, integral);
    end
    disp(example);
end


% re-train

weights = ones(example_number, 1) / example_number;
cl = random_number(1, 5000);
[error, thr, alpha] = weighted_error(new_responses, labels, weights, cl)
weights = ones(example_number, 1) / example_number;
tic; [index error threshold] = find_best_classifier(new_responses, labels, weights); toc

disp([index error]);


boosted_classifier = AdaBoost(new_responses, labels, 15);

%
%prediction = boosted_predict(cropped_faces(:, :, 4), boosted_classifier, weak_classifiers, 15)

%prediction = boosted_predict(nonfaces(:, :, 2), boosted_classifier, weak_classifiers, 15)

% % % % % % % % % % 
% % % % % % % % % % 


folder = 'training_test_data/test_face_photos';
allphotos = fullfile(folder, '*.jpg');
photos = dir(allphotos);
for k = 1:length(photos)
  baseFileName = photos(k).name;
  fullFileName = fullfile(folder, baseFileName);
  fprintf(1, 'Now reading %s\n', fullFileName);
  photo = read_gray(fullFileName);
  skin_photo = imread(fullFileName);
  skin = skin_integral(skin_photo);
  photo = photo .* skin;
%   photo2 = imrotate(photo, -10, 'bilinear');
  photo2 = imresize(photo, 0.5, 'bilinear');
  tempScale = .5:0.1:3; 
  tic; [result, boxes] = boosted_detector_demo(photo2,1, boosted_classifier, weak_classifiers, [59, 62], 3); toc
  figure(); imshow(result,[]); title(baseFileName);
end

% figure(3); imshow(max((result > 4) * 255, photo2 * 0.5), []);